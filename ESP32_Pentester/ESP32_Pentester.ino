/*
 *    Created by: Andrew O'Shei
 * 
 */


#include "bluetooth_functions.h"
#include "data_helpers.h"
#include "button_manager.h"
#include "data_writer.h"
#include "display_interface.h"

// Charge Pin, Logic 1 when battery is charging
#define CHARGE  4


String header = "Session ID: ";
unsigned int sessionID;


//BluetoothSerial SerialBT;

//static bool btScanAsync = true;
//static bool btScanSync = true;

//String swapName;

//uint8_t swapMAC[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


// String arrName[20];
// int arrNameC = 0;


//uint8_t arrAddr[20][6];
//int arrAddrC = 0;


//uint32_t swapCOD;

/*
void btAdvertisedDeviceFound(BTAdvertisedDevice* pDevice) {
  String test = pDevice->toString().c_str();
  String nam = pDevice->getName().c_str();
  arrName[arrNameC] = nam;
  arrNameC += 1;

  String addr = pDevice->getAddress().toString().c_str();
  int stepper = 0;
  for (int i = 0; i < addr.length(); i += 3) {
      arrAddr[arrAddrC][stepper] = convertToHexByte(addr[i], addr[i + 1]);
      stepper += 1;  
  }
  arrAddr[arrAddrC][stepper - 1] = arrAddr[arrAddrC][stepper - 1] - 2;
  arrAddrC += 1;

  swapCOD = pDevice->getCOD();

  Serial.print("Device COD: ");
  Serial.println(swapCOD, BIN);

  Serial.print("Found a device asynchronously: ");
  Serial.println(test);  
}
*/



void printDeviceAddress() {
  const uint8_t* point = esp_bt_dev_get_address();

  for (int i = 0; i < 6; i++) {
    char str[3];

    sprintf(str, "%02X", (int)point[i]);
    Serial.print(str);

    if (i < 5) {
      Serial.print(":");
    }
  }
}


void setup() {
  Serial.begin(115200);
  delay(500);
  sessionID = random(UINT_MAX);
  header += (String)sessionID;
  pinMode(CHARGE, INPUT);
  setupDisplay();
  
  
  while(digitalRead(CHARGE) == HIGH) {
    chargingScreen();
    delay(250);
  }

  // Setup button pins
  buttonSetup();

  if (!setupSDCard()) {
    displayError("Failed to mount", "SD Card.");
  } else {
    displayLog("SD Card mounted!");
  }

  displayLog("Searching directory");
  if (checkPathExists("/BT_Blaster")) {
    displayLog("Directory found!");
  } else {
    displayLog("mkdir BT_Blaster");
    if(createDir("/BT_Blaster")) {
      displayLog("Directory created!");
    } else {
      displayError("Failed to make", "root directory.");
    }
  }
  displayLog("Verifying files...");
  if (checkPathExists("/BT_Blaster/BT_Devices.json")) {
    displayLog("BT_Devices Found!");
  } else {
    if (writeFile("/BT_Blaster/BT_Devices.json", "{\"devices\": null}")) {
      displayLog("BT_Devices created!");
    } else {
      displayError("Failed to write", "BT_Devices.json");
    }
  }
  if (checkPathExists("/BT_Blaster/BT_Data.txt")) {
    displayLog("BT_Data Found!");
  } else {
    if (writeFile("/BT_Blaster/BT_Data.txt", header)) {
      displayLog("BT_Data created!");
    } else {
      displayError("Failed to write", "BT_Data.txt");
    }
  }
  if (checkPathExists("/BT_Blaster/Log_Debug.txt")) {
    displayLog("Log_Debug Found!");
  } else {
    if (writeFile("/BT_Blaster/Log_Debug.txt", header)) {
      displayLog("Log_Debug created!");
    } else {
      displayError("Failed to write", "Log_Debug.txt");
    }
  }
  displayLog("Starting...");

  
  setupSerialBT();

  Serial.print("Starting address: ");
  
  printDeviceAddress();
  Serial.println();
  
  Serial.println("The device started, now you can pair it with bluetooth!");


  /*
  // End Bluetooth
  SerialBT.end();

  delay(500);

  // Print captured name
  Serial.print("Captured Names: ");
  Serial.println(arrName[0]);
  Serial.println();
    
  // Swap BT MAC address
  esp_base_mac_addr_set(arrAddr[0]);


  // Set the bluetooth COD here
  esp_bt_cod_t setCOD;

  setCOD.minor = getBinarySegment(swapCOD, 2, 7);
  setCOD.major = getBinarySegment(swapCOD, 8, 12);
  setCOD.service = getBinarySegment(swapCOD, 13, 23);
  
  esp_err_t ret;
  ret = esp_bt_gap_set_cod(setCOD, ESP_BT_INIT_COD);

  
  // Bring Bluetooth back online
  SerialBT.begin(arrName[0]);

  Serial.print("Swap address: ");
  
  printDeviceAddress();
  Serial.println();
  */
}


bool scanning = false;


void loop() {
    
  // Check if buttons are pressed
  int buttonAction = updateButtons();
  if (buttonAction) {
    Serial.print("Button: ");
    Serial.println(buttonAction);
    if (!scanning) {
      Serial.println("Start scanning.");
      scanning = startBTScan();
    } else {
      Serial.println("Stop scanning.");
      scanning = stopBTScan();
    }
  }
}
