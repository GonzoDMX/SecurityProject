/*
 *    Created by: Andrew O'Shei
 * 
 */


#include "bluetooth_functions.h"
#include "data_helpers.h"
#include "button_manager.h"
#include "data_writer.h"
#include "display_interface.h"

// Charge Pin, Logic 1 when battery is charging
#define CHARGE  4


String header = "Session ID: ";
unsigned int sessionID;


String root_dir = "/BT_Blaster";
String file_device = "BT_Devices.json";
String file_data = "BT_Data.txt";
String file_debug = "Log_Debug.txt";

String device_path = "/BT_Blaster/BT_Devices.json";

// Cleaned up nav variables ----------
// Denotes current screen, 0 = Main Screen, 1 = Scan Screen, 2 = Scan Anim, 3 = Device Screen, 4 = Attack Screen
int current_screen = 0;

bool skip_action = false;

// Main Screen Variables
int mainScreenIndex = 1;
int btMode = 0;
bool btPaired = false;
bool btRecvd = false;
bool btLog = false;
int btDevices = 0;

// Scan Screen Variables
int scanScreenIndex = 1;

// Device Screen Variables
int deviceScreenIndex = 1;

// Device Spoof Variable
int spoof_device = 1;

// Device Screen Variables
int attackScreenIndex = 1;
int pin_len = 4;
int attack_device;

// Used for non-blocking delays
unsigned long delayT;


void verifyFile(String file, String initText) {
  String path = root_dir + "/" + file;
  displayLog(file);
  if (checkPathExists(path)) {
    displayLog("Found!");
  } else {
    if (writeFile(path, initText)) {
      displayLog("Created!");
    } else {
      displayError("Failed to write", file);
    }
  }
}


void checkForDevices() {
  String path = root_dir + "/" + file_device;
  displayLog(file_device);
  if (checkPathExists(path)) {
    displayLog("Found!");
    displayLog("Loading devices...");
    int count = getDeviceJson();
    Serial.print("Got count: ");
    Serial.println(count);
    if (count) {
      setDeviceCount(count);
      displayLog("Success!");
      return;
    } else {
      displayLog("Failed");
      deleteFile(path);
    }
  }
  displayLog("Writing file...");
  if (writeFile(path, "{\"devices\": null}")) {
    displayLog("Finished!");
  } else {
    displayError("Failed to write", file_device);
  }
}



void setup() {
  Serial.begin(115200);
  delay(500);

  sessionID = random(UINT_MAX);
  header += (String)sessionID;
  pinMode(CHARGE, INPUT);
  setupDisplay();
  
  while(digitalRead(CHARGE) == HIGH) {
    animateCharge();
    delay(250);
  }
  
  // Setup button pins
  buttonSetup();
  delay(1000);
  if (!setupSDCard()) {
    displayError("Failed to mount", "SD Card.");
  } else {
    displayLog("SD Card mounted!");
  }

  displayLog("Searching directory");
  if (checkPathExists(root_dir)) {
    displayLog("Directory found!");
  } else {
    displayLog("mkdir BT_Blaster");
    if(createDir(root_dir)) {
      displayLog("Directory created!");
    } else {
      displayError("Failed to mkdir", root_dir);
    }
  }
  displayLog("Verifying files...");

  checkForDevices();
  verifyFile(file_data, header);
  verifyFile(file_debug, header);
  if (!btMode) {
    displayLog("Mode: BT Classic");
  } else {
    displayLog("Mode: BT Low Energy");
  }
  
  displayLog("Init BT Interface");
  setupSerialBT();
  displayLog("Initialized!");
  displayLog("Name: BT_Blaster");
  displayLog("MAC " + printDeviceAddress());
  displayLog("Starting...");
  delay(1000);
  //delayT = millis();
  
}


void loop() {
  // Check if buttons are pressed
  int button = updateButtons();

  switch (current_screen) {
    // Main Select Screen ----------
    case 0:
      if (button == 1) {
        if (mainScreenIndex > 1 && mainScreenIndex != 4) {
          mainScreenIndex -= 1;
        }
      }
      if (button == 2) {
        if (mainScreenIndex < 6 && mainScreenIndex != 3) {
          mainScreenIndex += 1;
        }
      }
      if (button == 3) {
        if (mainScreenIndex > 3) {
          mainScreenIndex -= 3;
        }
      }
      if (button == 4) {
        if (mainScreenIndex < 4) {
          mainScreenIndex += 3;
        }
      }
      btDevices = getDeviceTotal();
      displayMain(mainScreenIndex, btMode, btPaired, btRecvd, btLog, btDevices);
      break;
    // Scan Select Screen ----------
    case 1:
      if (button == 1) {
        if (scanScreenIndex > 1) {
          scanScreenIndex -= 1;
        }
      }
      if (button == 2) {
        if (scanScreenIndex < 3) {
          scanScreenIndex += 1;
        }
      }
      displayScan(scanScreenIndex, btMode, btPaired, btRecvd, btLog, btDevices);
      break;
    // Scan in Progress Screen ----------
    case 2:
      if (button) {
        stopBTScan();
        current_screen = 0;
        if(button == 5) {
          skip_action = true;
        }
      }
      animateScan();
      break;
    // Device Select Screen ----------
    case 3:
      if (button == 1) {
        if (deviceScreenIndex == 0) {
          deviceScreenIndex = 1;
        }
      }
      if (button == 2) {
        deviceScreenIndex = 0;
      }
      if (button == 3) {
        if (deviceScreenIndex > 1) {
          deviceScreenIndex -= 1;
        }
      }
      if (button == 4) {
        if (deviceScreenIndex < getDeviceTotal()) {
          deviceScreenIndex += 1;
        }
      }
      displayDevices(deviceScreenIndex, btMode, btPaired, btRecvd, btLog, btDevices);
      break;
    // BT Attack Screen
    case 4:
      if (button == 1) {
        if (attackScreenIndex > 1) {
          attackScreenIndex -= 1;
        }
      }
      if (button == 2) {
        if (attackScreenIndex < 3) {
          attackScreenIndex += 1;
        }
      }
      if (button == 3) {
        if (attackScreenIndex == 1) {
          if (pin_len > 3) {
            pin_len -= 1;
          }
        }
      }
      if (button == 4) {
        if (attackScreenIndex == 1) {
          if (pin_len < 16) {
            pin_len += 1;
          }
        }
      }
      displayAttack(attackScreenIndex, pin_len,btMode, btPaired, btRecvd, btLog, btDevices);
      break;
    // BT Log Screen TODO!
    case 5:
        current_screen = 0;
        break;
    // BT Config Screen TODO!
    case 6:
        current_screen = 0;
        break;
    // Devices cleared screen
    case 101:
      displayWarning("Scanned devices", "cleared.", btMode, btPaired, btRecvd, btLog, btDevices);
      current_screen = 0;
      delay(2500);
      break;
    // No devices available warning
    case 102:
      displayWarning("No devices available", "try running a scan.", btMode, btPaired, btRecvd, btLog, btDevices);
      current_screen = 0;
      delay(2500);
      break;
    case 103:
      displayWarning("Spoofing device:", getDeviceName(spoof_device), btMode, btPaired, btRecvd, btLog, btDevices);
      current_screen = 0;
      delay(2500);
      break;
  }

  // If the action button (center) is pressed
  if (!skip_action) {
    if (button == 5) {
      buttonAction();
    }
  } else {
    skip_action = false;
  }

  // Reset Recvd flag if message was received
  if (btRecvd) {
    btRecvd = false;
  }
  //if ((millis() - delayT) > 2000) {
  //  rec = 1;
  //  delayT = millis();
  //}


  // Update the number of available devices
  btDevices = getDeviceTotal();
}


void buttonAction() {
  switch(current_screen) {
    case 0:
      // If an item that requires device selection is chosen (Pair, Spoof, Attack)
      if (mainScreenIndex > 1 && mainScreenIndex < 5) {
        // Check for devices
        if (getDeviceTotal()) {
          // Set device selection screen
          current_screen = 3;
        } else {
          // No devices found display warning
          current_screen = 102;
        }
      } else {
        // Set the selected screen
        current_screen = mainScreenIndex;
      }
      break;
    case 1:
      if(scanScreenIndex == 1) {
        // Start scanning for devices and start scan animation
        startBTScan();
        current_screen = 2;
      }
      else if (scanScreenIndex == 2) {
        // Clear scanned Devices from log
        if (!deleteFile(device_path)) {
          displayError("Failed to delete", file_device);
        }
        if (!writeFile(device_path, "{\"devices\": null}")) {
          displayError("Failed to write", file_device);
        }
        setDeviceCount(0);
        current_screen = 101;
      }
      else {
        // Cancel scan operation return to main screen
        current_screen = 0;
      }
      scanScreenIndex = 1;
      break;
    case 2:
      break;
    case 3:
      if (deviceScreenIndex) {
        if (mainScreenIndex == 2) {
          // If pairing a device is selected
        }
        else if (mainScreenIndex == 3) {
          // If Spoofing a device is selected
          spoof_device = deviceScreenIndex;
          spoofBTDevice(spoof_device);
          deviceScreenIndex = 1;
          current_screen = 103;
        }
        else if (mainScreenIndex == 4) {
          // If Attacking a device is selected
          attack_device = deviceScreenIndex;
          deviceScreenIndex = 1;
          current_screen = 4;
        }
      } else {
        // Cancel and return to main screen
        deviceScreenIndex = 1;
        current_screen = 0;
      }
      break;
    case 4:
      if (attackScreenIndex == 2) {
        // Initiate attack here
      }
      else if (attackScreenIndex == 3) {
        // Cancel the attack
        attackScreenIndex = 1;
        current_screen = 0;
      }
      break;
  }
}
