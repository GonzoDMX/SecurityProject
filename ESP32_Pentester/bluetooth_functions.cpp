/*
 *    Created by: Andrew O'Shei
 * 
 *    Bluetooth functions
 * 
 */


 #include "bluetooth_functions.h"

BluetoothSerial SerialBT;


String arrName[20];
int arrNameC = 0;

uint8_t arrAddr[20][6];
int arrAddrC = 0;


void setupSerialBT() {
  SerialBT.begin("ESP32test"); //Bluetooth device name
}


void btAdvertisedDeviceFound(BTAdvertisedDevice* pDevice) {
  String test = pDevice->toString().c_str();
  String btName = pDevice->getName().c_str();
  arrName[arrNameC] = btName;
  arrNameC += 1;

  String btAddress = pDevice->getAddress().toString().c_str();
  int stepper = 0;
  for (int i = 0; i < btAddress.length(); i += 3) {
      arrAddr[arrAddrC][stepper] = convertToHexByte(btAddress[i], btAddress[i + 1]);
      stepper += 1;  
  }
  arrAddr[arrAddrC][stepper - 1] = arrAddr[arrAddrC][stepper - 1] - 2;
  arrAddrC += 1;

  uint32_t btClass = pDevice->getCOD();

  // uint32_t btMinor = getBinarySegment(swapCOD, 2, 7);
  // uint32_t btMajor = getBinarySegment(swapCOD, 8, 12);
  // uint32_t btService = getBinarySegment(swapCOD, 13, 23);

  Serial.print("Device COD: ");
  Serial.println(btClass);

  Serial.print("Found a device asynchronously: ");
  Serial.println(test);

  addDeviceEntry(btName, btAddress, btClass);
}


bool startBTScan() {

  // SD Card Test
  if (checkPathExists("/Bluetooth_Data/BT_Devices.json")) {
    deleteFile("/Bluetooth_Data/BT_Devices.json");
    writeFile("/Bluetooth_Data/BT_Devices.json", "{devices:");
  } else {
    if (!checkPathExists("/Bluetooth_Data")) {
      createDir("/Bluetooth_Data");
    }
    writeFile("/Bluetooth_Data/BT_Devices.json", "{devices:");
  }
  
  if (!SerialBT.discoverAsync(btAdvertisedDeviceFound)) {
    return false;
  }
  return true;
}


bool stopBTScan() {
  SerialBT.discoverAsyncStop();
  appendFile("/Bluetooth_Data/BT_Devices.json", "}");
  resetID();
  return false;
}
