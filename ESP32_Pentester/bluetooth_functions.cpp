/*
 *    Created by: Andrew O'Shei
 * 
 *    Bluetooth functions
 * 
 */


 #include "bluetooth_functions.h"

BluetoothSerial SerialBT;


String arrName[20];
int arrNameC = 0;

uint8_t arrAddr[20][6];
int arrAddrC = 0;

int deviceCount = 0;

String devicesPath = "/BT_Blaster/BT_Devices.json";

void setupSerialBT() {
  SerialBT.begin("BT_Blaster"); //Bluetooth device name
}


void btAdvertisedDeviceFound(BTAdvertisedDevice* pDevice) {
  Serial.println("Device found!");
  String test = pDevice->toString().c_str();
  String btName = pDevice->getName().c_str();
  arrName[arrNameC] = btName;
  arrNameC += 1;

  String btAddress = pDevice->getAddress().toString().c_str();
  int stepper = 0;
  for (int i = 0; i < btAddress.length(); i += 3) {
      arrAddr[arrAddrC][stepper] = convertToHexByte(btAddress[i], btAddress[i + 1]);
      stepper += 1;  
  }
  arrAddr[arrAddrC][stepper - 1] = arrAddr[arrAddrC][stepper - 1] - 2;
  arrAddrC += 1;

  uint32_t btClass = pDevice->getCOD();

  Serial.println(test);

  addDeviceEntry(btName, btAddress, btClass);
  deviceCount += 1;
}


bool startBTScan() {
  Serial.println("Starting scan in bt_f.h");
  if (!deleteFile(devicesPath)) {
    Serial.println("Failed to delete file.");
    return false;
  }
  deviceCount = 0;
  if (!writeFile(devicesPath, "{\"devices\":")) {
    Serial.println("Failed to write file.");
    return false;
  }
  
  if (!SerialBT.discoverAsync(btAdvertisedDeviceFound)) {
    Serial.println("Failed to init scan.");
    return false;
  }
  return true;
}


bool stopBTScan() {
  SerialBT.discoverAsyncStop();
  appendFile(devicesPath, "}\n}");
  resetID();
  getDeviceJson();
  return false;
}


String printDeviceAddress() {
  String macAddr;
  const uint8_t* point = esp_bt_dev_get_address();

  for (int i = 0; i < 6; i++) {
    char str[3];

    sprintf(str, "%02X", (int)point[i]);
    macAddr += str;
    if (i < 5) {
      macAddr+= ":";
    }
  }
  return macAddr;
}


String getDeviceCount() {
  return (String)deviceCount;
}

int getDeviceTotal() {
  return deviceCount;
}

void setDeviceCount(int count) {
  deviceCount = count;
}


void spoofBTDevice(int device) {
  uint8_t address[6];
  // Gather the device profile
  String btName = getDeviceName(device);
  String btMac = getDeviceMac(device);
  uint32_t btCOD = getDeviceClass(device);

  // Close down the existing BT interface
  SerialBT.flush();  
  SerialBT.disconnect();
  SerialBT.end();

  // Set the BT Mac address
  int mIndex = 0;
  for(int i = 0; i < 6; i++) {
    uint8_t addr = convertToHexByte((char)btMac[mIndex], (char)btMac[mIndex+1]);
    if(i != 5) {
      address[i] = addr;  
    } else {
      address[i] = addr - 2;
    }
    mIndex += 3;
  }
  esp_base_mac_addr_set(address);

  // Set BT class of device (COD)
  esp_bt_cod_t setCOD;
  setCOD.minor = getBinarySegment(btCOD, 2, 7);
  setCOD.major = getBinarySegment(btCOD, 8, 12);
  setCOD.service = getBinarySegment(btCOD, 13, 23);
  esp_err_t ret;
  ret = esp_bt_gap_set_cod(setCOD, ESP_BT_INIT_COD);

  // Restart the Bluetooth interface with spoofed device profile
  SerialBT.begin(btName);
  
}
