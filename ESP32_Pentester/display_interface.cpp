/*
 *    Created by: Andrew O'Shei
 * 
 *    Manages OLED Screen
 * 
 */

#include "display_interface.h"

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R2, /* reset=*/ U8X8_PIN_NONE);

int frameStep = 0;

int logStep;

char logBuffer[6][22];

// Animation parameters
int anim_a = 0;
int anim_b = 0;
int anim_c = 0;


void setupDisplay() {
  initLog();
  u8g2.begin();
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.setFontRefHeightExtendedText();
  u8g2.setDrawColor(1);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
  u8g2.clearBuffer();
  u8g2.drawStr( 40, 17, "Bluetooth");
  u8g2.drawStr( 46, 27, "Blaster");
  u8g2.drawRFrame( 24, 12, 80, 30, 10);
  u8g2.drawStr( 18, 54, "andrewoshei.com");
  u8g2.sendBuffer();
  delay(3000);
  u8g2.clearBuffer();
  u8g2.sendBuffer();
}



void initLog() {
  logStep = 0;
  for (int i = 0; i < 6; i++) {
    memset(logBuffer[i], 0x00, sizeof(logBuffer[i]));
  }
}

void shiftLog() {
  for (int i = 0; i < 5; i++) {
    for(int j = 0; j < 21; j++) {
      logBuffer[i][j] = logBuffer[i+1][j];
    }
  }
  memset(logBuffer[5], 0x00, sizeof(logBuffer[5]));
}

void displayLog(String message) {
  int i;
  if (logStep == 6) {
    logStep -= 1;
    shiftLog();
  }
  
  for(i = 0; i < message.length(); i++) {
    if (i > 21) {
      break;
    }
    logBuffer[logStep][i] = message[i];
  }
  logStep += 1;
  
  u8g2.clearBuffer();
  for (i = 0; i < 6; i++) {
    u8g2.drawStr( 0, i*10, logBuffer[i]);
  }
  u8g2.sendBuffer();
  delay(250);
}

void displayError(String line_1, String line_2) {
  int i, len = 21;
  char buf_1[len], buf_2[len];
  memset(buf_1, 0x00, sizeof(buf_1));
  memset(buf_2, 0x00, sizeof(buf_2));
  int space_1 = (len - line_1.length()) / 2;
  int space_2 = (len - line_2.length()) / 2;
  for (i = 0; i < space_1; i++) {
    line_1 = " " + line_1;
  }

  for (i = 0; i < space_2; i++) {
    line_2 = " " + line_2;
  }

  for(i = 0; i < line_1.length(); i++) {
    if (i > 21) {
      break;
    }
    buf_1[i] = line_1[i];
  }

  for(i = 0; i < line_2.length(); i++) {
    if (i > 21) {
      break;
    }
    buf_2[i] = line_2[i];
  }
  
  u8g2.clearBuffer();
  u8g2.drawStr( 0, 44, buf_1);
  u8g2.drawStr( 0, 54, buf_2);
  u8g2.drawCircle(64, 20, 18);
  u8g2.drawRBox(62, 6, 6, 18, 2);
  u8g2.drawRBox(62, 28, 6, 6, 2);

  u8g2.sendBuffer();

  // Error messages correspond with critical failures
  // Therefore any further operation will be blocked
  while(1) {
    delay(500);
  }
}


void displayClear() {
  u8g2.clearBuffer();
  u8g2.sendBuffer();
}


// Builds the main window border ----------------------
void buildMainWindow(int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices) {
  // Draw the Border
  u8g2.drawRFrame(0, 0, 128, 64, 3);
  u8g2.drawRFrame(52, 0, 64, 13, 0);
  u8g2.drawLine( 0,12, 128,12 );
  u8g2.drawLine( 0,50, 128,50 );
  u8g2.drawLine( 69,50,  69,64);

  // Display Bluetooth operating mode Bluetooth Classic = BTC, Bluetooth Low Eneregy = BLE
  u8g2.drawStr(3, 2, "Mode:");
  if (!btMode) {
    u8g2.drawStr( 33, 2, "BTC");
  } else {
    u8g2.drawStr( 33, 2, "BLE");
  }

  // Display Yes if BT_Blaster is paired with a dvice
  u8g2.drawStr( 55, 2, "Paired:");
  if (btPaired) {
    u8g2.drawStr( 96, 2, "Yes");
  } else {
    u8g2.drawStr( 99, 2, "No");
  }

  // If a Bluetooth message was received
  if (btRecvd) {
    u8g2.drawRBox(116, 1, 11, 11, 0);
  }

  // Display Yes if data logging is active 
  u8g2.drawStr(3, 52, "Logging:");
  if (btLog) {
    u8g2.drawStr( 50, 52, "Yes");
  } else {
    u8g2.drawStr( 54, 52, "No");
  }

  // Display number of available bluetooth devices
  String devices = "Devs: " + (String)btDevices;
  u8g2.drawStr(72, 52, getCharArray(devices));
}

// Display the main winsow select screen --------------------
void displayMain(int index, int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices) {
    u8g2.clearBuffer();
    buildMainWindow(btMode, btPaired, btRecvd, btLog, btDevices);

    // Set the items available
    u8g2.drawStr( 20, 14, "Scan");
    u8g2.drawStr( 20, 26, "Pair");
    u8g2.drawStr( 20, 38, "Spoof");
    u8g2.drawStr( 80, 14, "Attack");
    u8g2.drawStr( 80, 26, "Log");
    u8g2.drawStr( 80, 38, "Config");
    
    //Set the cursor position
    int off_x = 10;
    int off_y = 15;
    if (index > 3) {
    off_x += 60;
    index -= 3;
    }
    off_y += 12*(index-1);
    
    //Draw cursor    
    u8g2.drawTriangle( 0+off_x,0+off_y,  0+off_x,6+off_y, 6+off_x,3+off_y);
    u8g2.sendBuffer();
}

// Display scanning mode options --------------------
void displayScan(int index, int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices) {
    u8g2.clearBuffer();
    buildMainWindow(btMode, btPaired, btRecvd, btLog, btDevices);

    // Set the available items
    u8g2.drawStr( 20, 14, "Scan for devices");
    u8g2.drawStr( 20, 26, "Clear devices");
    u8g2.drawStr( 20, 38, "Cancel");

    // Set the cursor position
    int off_x = 10;
    int off_y = 15;
    off_y += 12*(index-1);
    
    // Draw the cursor
    u8g2.drawTriangle( 0+off_x,0+off_y,  0+off_x,6+off_y, 6+off_x,3+off_y);
    u8g2.sendBuffer();
}

// Animation displayed during a scan for new devices ----------------------
void animateScan() {
  u8g2.clearBuffer();
  // Draw border
  u8g2.drawRFrame(0, 0, 128, 64, 3);
  // Get the device count
  String devices = "Devices found: " + getDeviceCount();
  // Set the information
  u8g2.drawStr(42, 0, "Scanning");
  u8g2.drawStr(0, 44, getCharArray(devices));
  u8g2.drawStr(0, 54, "Press button to end.");

  // Draw the animation elements
  if (anim_c < 3) {
    u8g2.drawCircle(64, 24, 10-anim_c);
  }
  else if (anim_c < 6) {
    u8g2.drawCircle(64, 24, 7+anim_c);
  }
  else {
    u8g2.drawCircle(64, 24, 10);
  }
  u8g2.drawLine(63-anim_a, 14+anim_b, 63-anim_a, 34-anim_b);
  u8g2.drawLine(64+anim_a, 14+anim_b, 64+anim_a, 34-anim_b);

  u8g2.sendBuffer();

  // Increment animation elements
  anim_a += 2;
  anim_c += 1;
  if (anim_a > 50) {
    anim_a = 0;
    anim_b = 0;
    anim_c = 0;
  }
  if (anim_b < 25) {
    anim_b += 1;
  }
}

// Display the device select window ---------------------
void displayDevices(int index, int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices) {
    u8g2.clearBuffer();
    buildMainWindow(btMode, btPaired, btRecvd, btLog, btDevices);
    
    // If a device is actually selected
    if(index) {
      if (index < 10) {
        u8g2.drawStr(56, 14, getCharArray((String)index));
      } else {
        u8g2.drawStr(49, 14, getCharArray((String)index));
      }
      u8g2.drawStr(63, 14, "/");
      u8g2.drawStr(70, 14, getCharArray(getDeviceCount()));
      
      u8g2.drawStr(14,26,getDeviceName(index));
      u8g2.drawStr(14,38,getDeviceMac(index));
      
      if(index != 1) {
      u8g2.drawTriangle(2,32, 10,24, 10,40);
      } else {
      u8g2.drawLine(2,32, 10,24);
      u8g2.drawLine(10,24, 10,40);
      u8g2.drawLine(2,32, 10,40);
      }
      
      if(index < getDeviceTotal()) {
      u8g2.drawTriangle(126,32, 118,24, 118,40);
      } else {
      u8g2.drawLine(126,32, 118,24);
      u8g2.drawLine(118,24, 118,40);
      u8g2.drawLine(126,32, 118,40);
      }
    }
    // Provide the option to cancel
    else {
      // Draw text
      u8g2.drawStr(46, 28, "Cancel");
      // Triangle 1
      u8g2.drawLine(18,32, 10,24);
      u8g2.drawLine(10,24, 10,40);
      u8g2.drawLine(18,32, 10,40);
      // Triangle 2
      u8g2.drawLine(110,32, 118,24);
      u8g2.drawLine(118,24, 118,40);
      u8g2.drawLine(110,32, 118,40);
    }
    u8g2.sendBuffer();
}


// Display the Attack window ---------------------
void displayAttack(int index, int pin, int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices) {
    u8g2.clearBuffer();
    buildMainWindow(btMode, btPaired, btRecvd, btLog, btDevices);

    char* pin_len = getCharArray("Pin Length: " + (String)pin);
    
    u8g2.drawStr( 20, 14, pin_len);
    u8g2.drawStr( 20, 26, "Start");
    u8g2.drawStr( 20, 38, "Cancel");

    // Set the cursor position
    int off_x = 10;
    int off_y = 15;
    off_y += 12*(index-1);
    
    // Draw the cursor
    u8g2.drawTriangle( 0+off_x,0+off_y,  0+off_x,6+off_y, 6+off_x,3+off_y);
    
    u8g2.sendBuffer(); 
}


// Display warnings insidce the main window --------------------
void displayWarning(String text_1, String text_2, int btMode, bool btPaired, bool btRecvd, bool btLog, int btDevices){
    u8g2.clearBuffer();
    buildMainWindow(btMode, btPaired, btRecvd, btLog, btDevices);
    // Set text position
    int x_1 = 5;
    int x_2 = 5;
    int len_1 = text_1.length();
    int len_2 = text_2.length();
    x_1 = x_1 + ((20 - len_1)/2 * 5);
    x_2 = x_2 + ((20 - len_2)/2 * 5);
    // Draw text
    u8g2.drawStr(x_1, 20, getCharArray(text_1));
    u8g2.drawStr(x_2, 32, getCharArray(text_2));
    u8g2.sendBuffer();
}


// Display the charging battery animation ---------------------
void animateCharge() {
  u8g2.clearBuffer();
  switch(frameStep) {
    case 1:
      u8g2.drawStr( 34, 54, "Charging.");
      break;
    case 2:
      u8g2.drawStr( 34, 54, "Charging..");
      break;
    case 3:
      u8g2.drawStr( 34, 54, "Charging...");
      break;
    default:
      u8g2.drawStr( 34, 54, "Charging");
  }
  frameStep += 1;
  if (frameStep > 3) {
    frameStep = 0;
  }
  u8g2.drawRFrame( 28, 10, 70, 32, 5);
  u8g2.drawRFrame( 97, 15, 8, 22, 2);
  
  u8g2.drawLine(60, 19, 60, 25);
  u8g2.drawLine(60, 19, 80, 25);
  u8g2.drawLine(60, 25, 44, 25);
  u8g2.drawLine(44, 25, 64, 31);
  u8g2.drawLine(64, 31, 64, 25);
  u8g2.drawLine(64, 25, 80, 25);
  u8g2.sendBuffer();
}
