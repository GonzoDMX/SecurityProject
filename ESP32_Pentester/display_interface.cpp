/*
 *    Created by: Andrew O'Shei
 * 
 *    Manages OLED Screen
 * 
 */

#include "display_interface.h"

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R2, /* reset=*/ U8X8_PIN_NONE);

int frameStep = 0;

int logStep;

char logBuffer[6][21];

void setupDisplay() {
  initLog();
  u8g2.begin();
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.setFontRefHeightExtendedText();
  u8g2.setDrawColor(1);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
  u8g2.clearBuffer();
  u8g2.drawStr( 40, 17, "Bluetooth");
  u8g2.drawStr( 46, 27, "Blaster");
  u8g2.drawRFrame( 24, 12, 80, 30, 10);
  u8g2.drawStr( 18, 54, "andrewoshei.com");
  u8g2.sendBuffer();
  delay(1000);
  u8g2.clearBuffer();
  u8g2.sendBuffer();
}


void chargingScreen() {
  u8g2.clearBuffer();
  switch(frameStep) {
    case 1:
      u8g2.drawStr( 34, 54, "Charging.");
      break;
    case 2:
      u8g2.drawStr( 34, 54, "Charging..");
      break;
    case 3:
      u8g2.drawStr( 34, 54, "Charging...");
      break;
    default:
      u8g2.drawStr( 34, 54, "Charging");
  }
  frameStep += 1;
  if (frameStep > 3) {
    frameStep = 0;
  }
  u8g2.drawRFrame( 28, 10, 70, 32, 5);
  u8g2.drawRFrame( 97, 15, 8, 22, 2);
  
  u8g2.drawLine(60, 19, 60, 25);
  u8g2.drawLine(60, 19, 80, 25);
  u8g2.drawLine(60, 25, 44, 25);
  u8g2.drawLine(44, 25, 64, 31);
  u8g2.drawLine(64, 31, 64, 25);
  u8g2.drawLine(64, 25, 80, 25);
  u8g2.sendBuffer();
}

void initLog() {
  logStep = 0;
  for (int i = 0; i < 6; i++) {
    memset(logBuffer[i], 0x00, sizeof(logBuffer[i]));
  }
}


void shiftLog() {
  for (int i = 0; i < 5; i++) {
    for(int j = 0; j < 21; j++) {
      logBuffer[i][j] = logBuffer[i+1][j];
    }
  }
  memset(logBuffer[5], 0x00, sizeof(logBuffer[5]));
}

void displayLog(String message) {
  int i;
  if (logStep == 6) {
    logStep -= 1;
    shiftLog();
  }
  
  for(i = 0; i < message.length(); i++) {
    if (i > 21) {
      break;
    }
    logBuffer[logStep][i] = message[i];
  }
  logStep += 1;
  
  u8g2.clearBuffer();
  for (i = 0; i < 6; i++) {
    u8g2.drawStr( 0, i*10, logBuffer[i]);
  }
  u8g2.sendBuffer();
  delay(250);
}

void displayError(String line_1, String line_2) {
  int i, len = 21;
  char buf_1[len], buf_2[len];
  memset(buf_1, 0x00, sizeof(buf_1));
  memset(buf_2, 0x00, sizeof(buf_2));
  int space_1 = (len - line_1.length()) / 2;
  int space_2 = (len - line_2.length()) / 2;
  for (i = 0; i < space_1; i++) {
    line_1 = " " + line_1;
  }

  for (i = 0; i < space_2; i++) {
    line_2 = " " + line_2;
  }

  for(i = 0; i < line_1.length(); i++) {
    if (i > 21) {
      break;
    }
    buf_1[i] = line_1[i];
  }

  for(i = 0; i < line_2.length(); i++) {
    if (i > 21) {
      break;
    }
    buf_2[i] = line_2[i];
  }
  
  u8g2.clearBuffer();
  u8g2.drawStr( 0, 44, buf_1);
  u8g2.drawStr( 0, 54, buf_2);
  u8g2.drawCircle(64, 20, 18);
  u8g2.drawRBox(62, 6, 6, 18, 2);
  u8g2.drawRBox(62, 28, 6, 6, 2);

  u8g2.sendBuffer();

  // Error messages correspond with critical failures
  // Therefore any further operation will be blocked
  while(1) {
    delay(500);
  }
}
