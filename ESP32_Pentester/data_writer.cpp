/*
 *    Created by: Andrew O'Shei
 * 
 *    Various functions to write and retrieve data from SD Card Reader
 * 
 */

#include "data_writer.h"

int id = 1;

char path[256];

char deviceBuffer[4096];

String devPath = "/BT_Blaster/BT_Devices.json";


DynamicJsonDocument deviceJson(4096);

// Check if SD Card is available
bool setupSDCard() {
  if (!SD.begin()) {
    return false;
  }
  
  uint8_t cardType = SD.cardType();
  if (cardType == CARD_NONE) {
    return false;
  }
  return true;
}

void setPath(String targ_path) {
  memset(path, 0x00, sizeof(path));
  for (int i = 0; i < targ_path.length(); i++) {
    path[i] = (char)targ_path[i];
  }
}

bool createDir(String targ_path){
  setPath(targ_path);
  if(SD.mkdir(path)){
      return true;
  }
  return false;
}


bool checkPathExists(String targ_path) {
  if (SD.exists(getCharArray(targ_path))) {
    return true;    
  }
  return false;
}


bool readFile(String targ_path){
    setPath(targ_path);
    File file = SD.open(path);
    if(!file){
        return false;
    }
    while(file.available()){
        Serial.write(file.read());
    }
    file.close();
    return true;
}

int getDeviceJson() {
  int index = 0;
  memset(deviceBuffer, 0x00, sizeof(deviceBuffer));
  File file = SD.open(devPath);
  if(!file) {
    Serial.println("Failed to read devices.");
    return 0;
  }
  while (file.available()) {
    deviceBuffer[index] = file.read();
    index += 1;
    if (index > 4096) {
      Serial.println("File overload.");
      return 0;
    }
  }
  file.close();
  DeserializationError error = deserializeJson(deviceJson, deviceBuffer);
  if (error) {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return 0;
  }
  return findDeviceCount();
}


int findDeviceCount() {
  int index = 1;
  while(deviceJson["devices"][(String)index]["mac"].as<String>().length() == 17) {
    index += 1;
  }
  return index-1;
}


bool writeFile(String targ_path, String message){
    setPath(targ_path);
    File file = SD.open(path, FILE_WRITE);
    if(!file.print(message)){
      return false;
    }
    file.close();
    return true;
}


bool appendFile(String targ_path, String message){
    setPath(targ_path);
    File file = SD.open(path, FILE_APPEND);
    if(!file){
        return false;
    }
    if(!file.print(message)){
      return false;
    }
    file.close();
    return true;
}


bool deleteFile(String targ_path) {
    setPath(targ_path);
    if(!SD.remove(path)){
        return false;
    }
    return true;
}


void addDeviceEntry(String btName, String btAddress, uint32_t btClass) {
  DynamicJsonDocument doc(1024);

  doc[(String)id]["name"] = btName;
  doc[(String)id]["mac"] = btAddress;
  doc[(String)id]["cod"] = btClass;

  String outputJson;
  serializeJsonPretty(doc, outputJson); 

  String writeOut;
  outputJson.remove((outputJson.length() -1), 1);
  if (id > 1) {
    outputJson.remove(0, 1);
    writeOut = "," + outputJson;
  } else {
    writeOut = outputJson;
  }

  id += 1;
  appendFile("/BT_Blaster/BT_Devices.json", writeOut);
}

void resetID() {
  id = 1;
}

char* getDeviceName(int device) {
    String dNAME = deviceJson["devices"][(String)device]["name"].as<String>();
    return getCharArray(dNAME);
}


char* getDeviceMac(int device) {
    String dMAC = deviceJson["devices"][(String)device]["mac"].as<String>();
    return getCharArray(dMAC);
}

uint32_t getDeviceClass(int device) {
    uint32_t dCOD = deviceJson["devices"][(String)device]["cod"].as<uint32_t>();
    return dCOD;
}
